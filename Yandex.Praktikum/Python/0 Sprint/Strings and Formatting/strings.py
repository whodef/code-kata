# Строка: последовательность букв

# Задача 1
# Допишите код функции penult_word() так, чтобы она возвращала третье с конца слово из любой фразы,
# переданной в аргументе.

quote_1 = 'Работает? Не трогай'
quote_2 = 'Если твой код работает, значит это хороший код'
quote_3 = 'Лень - главное достоинство программиста'


def penult_word(message):
    word_list = message.split()
    return word_list[-3]


# Вызовы функции готовы к работе, не изменяйте их!
# Вызываем функцию penult_word с аргументом quote_1 и печатаем результат её работы.
print(penult_word(quote_1))

# То же, но с аргументом quote_2.
print(penult_word(quote_2))

# То же с аргументом quote_3.
print(penult_word(quote_3))


# Задача 2
# В коде приготовлен список запросов к Анфисе queries. Необходимо определить, какие из них адресованы Анфисе,
# а какие — другим людям.
# Напишите функцию check_query(), которая принимает запрос как параметр, анализирует его
# и возвращает одну из двух строк:

# строку 'запрос к Анфисе', если запрос начинается со слова 'Анфиса',
# или строку 'запрос к кому-то ещё', если запрос начинается с любого другого слова.

# Код вызова функции и вывода результатов на экран уже написан в теле программы.

def check_query(query):
    # Допишите код тела функции
    elements = query.split(', ')
    if elements[0] == 'Анфиса':
        return 'запрос к Анфисе'
    else:
        return 'запрос к кому-то ещё'


# Дальше следует код, вызывающий вашу функцию; не изменяйте его:
queries = [
    'Анфиса, сколько у меня друзей?',
    'Андрей, ну где ты был?',
    'Андрей, ну обними меня скорей!',
    'Анфиса, кто все мои друзья?',
]

# Напечатаем результат.
# Переберём список вопросов в цикле
for q in queries:
    # Каждый из вопросов передадим аргументом
    # в функцию check_query()
    result = check_query(q)
    # И для каждого вызова напечатаем вопрос и, через дефис - вердикт программы
    print(q, '-', result)


# Задача 3
# Анфиса научилась отличать своё имя от других. Теперь надо научить её распознавать суть вопроса.
# Перепишите функцию check_query() так, чтобы она возвращала заданный вопрос:
# для вопроса 'Анфиса, сколько у меня друзей?' верните строку 'сколько у меня друзей?';
# для вопроса 'Андрей, ну где ты был?' — строку 'ну где ты был?'.

def check_query(query):
    elements = query.split(', ')
    # Напишите код функции
    if elements[0] == 'Анфиса':
        return elements[1]
    else:
        return elements[1]


# Дальше следует код, вызывающий вашу функцию; не изменяйте его:
queries = [
    'Анфиса, сколько у меня друзей?',
    'Андрей, ну где ты был?',
    'Андрей, ну обними меня скорей!',
    'Анфиса, кто все мои друзья?'
]

for q in queries:
    result = check_query(q)
    print(q, '—', result)

# Задача 4
# Упростим и улучшим код Анфисы.
# При выводе перечня друзей или городов Анфиса применяет циклы, объединяя ключи или значения словаря в одну строку,
# через пробел.
# Но теперь в вашем арсенале есть метод join(), он решает ту же задачу: создаёт строку из элементов последовательности.
# Уберите из кода циклы, в которых создаётся перечень друзей и перечень городов, а эти перечни создайте с помощью
# метода join(). Имена друзей и названия городов должны быть разделены запятыми и пробелом.

# # Анфиса должна вернуть примерно такие строки:
# # В ответ на запрос 'Кто все мои друзья?'-
# Твои друзья: Серёга, Соня, Миша, ...
#
# # В ответ на запрос 'Где все мои друзья?' -
# Твои друзья в городах: Омск, Москва, Челябинск, ...

DATABASE = {
    'Серёга': 'Омск',
    'Соня': 'Москва',
    'Миша': 'Москва',
    'Дима': 'Челябинск',
    'Алина': 'Красноярск',
    'Егор': 'Пермь',
    'Коля': 'Красноярск'
}


def process_anfisa(query):
    if query == 'Сколько у меня друзей?':
        count = len(DATABASE)

        return 'У тебя ' + str(count) + ' друзей.'
    elif query == 'Кто все мои друзья?':
        # Из словаря DATABASE создайте строку с помощью join();
        # имена друзей разделите запятой и пробелом.
        # Запишите эту строку в переменную friends_string (вместо пустых кавычек).
        friends_string = ', '.join(DATABASE)

        # Этот цикл больше не понадобится, удалите его
        # for friend in DATABASE:
        # friends_string += friend + ' '

        return 'Твои друзья: ' + friends_string
    elif query == 'Где все мои друзья?':
        unique_cities = set(DATABASE.values())
        # Из сета unique_cities создайте строку с помощью join();
        # названия городов разделите запятой и пробелом.
        # Запишите эту строку в переменную cities_string (вместо пустых кавычек).
        cities_string = ', '.join(unique_cities)

        # Этот цикл больше не понадобится, удалите его
        # for city in unique_cities:
        # cities_string += city + ' '

        return 'Твои друзья в городах: ' + cities_string
    else:
        return '<неизвестный запрос>'


print('Привет, я Анфиса!')
print(process_anfisa('Сколько у меня друзей?'))
print(process_anfisa('Кто все мои друзья?'))
print(process_anfisa('Где все мои друзья?'))


############

# f-строки: переменные прямо в тексте

# Задача 1
# Замените объединение строк на f-строку.

def show_meteo(temperature, weather):
    print(f'Сейчас {weather}, на градуснике {str(temperature)}.')


show_meteo(24, 'облачно')

# Задача 2
# Замените в коде все объединения строк на f-строки.

for messages_count in range(0, 21):
    if messages_count == 0:
        print('У вас нет новых сообщений')
    elif messages_count == 1:
        print('У вас 1 новое сообщение')
    elif messages_count <= 4:
        print(f'У вас {messages_count} новых сообщения')
    else:
        print(f'У вас {messages_count} новых сообщений')


############

# Выражения в f-строках


# Задача 1.
# Научите Анфису сообщать время в формате ЧЧ:ММ:СС (часы, минуты, секунды).
# Программа должна напечатать На часах 19:28:06.

def print_time(hour, minute, second):
    print(f'На часах {hour}:{minute}:{second}')  # Аргумент должен содержать f-строку


print_time('19', '28', '06')


# Задача 2.
# Анфиса получила список listened с длительностью прослушанных песен (в секундах).
# Функция calc_stat() должна вернуть строку, в которой указано количество прослушанных песен: 'Вы прослушали N песен.',
# где N — длина списка listened.

def calc_stat(listened):  # От англ. calculate statistics, посчитать статистику
    # Напишите код функции calc_stat()
    songs = len(listened)
    return f'Вы прослушали {songs} песен.'


print(calc_stat([189, 148, 210, 144, 174, 158, 163, 189, 227, 198]))


# Задача 3.
# Допишите функцию calc_stat(): выведите на экран суммарную статистику.
# 'Вы прослушали N песен общей продолжительностью M минут.'
# N — длина списка listened;
# M — количество целых минут общей продолжительности прослушанных песен.

def calc_stat(listened):  # От англ. calculate statistics, посчитать статистику
    # Напишите код функции calc_stat()
    songs = len(listened)
    return f'Вы прослушали {songs} песен.'


print(calc_stat([189, 148, 210, 144, 174, 158, 163, 189, 227, 198]))

# Задача 4.
# Вы знаете об f-строках достаточно, чтобы оптимизировать код Анфисы. Все фразы, которые сейчас составляет Анфиса,
# создаются через конкатенацию строк: фрагменты строк и значения переменных объединяются оператором +.
# Сделайте код проще: замените конкатенацию на f-строки. В коде отмечены места, где это нужно сделать.

DATABASE = {
    'Серёга': 'Омск',
    'Соня': 'Москва',
    'Миша': 'Москва',
    'Дима': 'Челябинск',
    'Алина': 'Красноярск',
    'Егор': 'Пермь',
    'Коля': 'Красноярск'
}


def process_anfisa(query):
    if query == 'Сколько у меня друзей?':
        count = len(DATABASE)
        # В следующей строке замените конкатенацию на f-строку
        return f'У тебя {count} друзей.'
    elif query == 'Кто все мои друзья?':
        friends_string = ', '.join(DATABASE)
        # В следующей строке замените конкатенацию на f-строку
        return f'Твои друзья: {friends_string}'
    elif query == 'Где все мои друзья?':
        unique_cities = set(DATABASE.values())
        cities_string = ', '.join(unique_cities)
        # В следующей строке замените конкатенацию на f-строку
        return f'Твои друзья в городах: {cities_string}'
    else:
        return '<неизвестный запрос>'


print('Привет, я Анфиса!')
print(process_anfisa('Сколько у меня друзей?'))
print(process_anfisa('Кто все мои друзья?'))
print(process_anfisa('Где все мои друзья?'))


############

# Запросы к друзьям

# Задача 1.
# Это код Анфисы, который вы последовательно писали на протяжении нескольких тем. В него добавлена функция
# format_friends_count(), но она пока нигде не вызывается.
# Перечитайте и запустите код: освежите в памяти, как выполняются запросы из списка queries. А после этого — за работу!
# Научите Анфису говорить грамотно. В словаре DATABASE семь элементов, и на вопрос «Анфиса, сколько у меня друзей»
# программа отвечает: «У тебя 7 друзей».
# Но если друзей будет трое — Анфиса напишет «у тебя 3 друзей», а грамотные программы так не говорят!
# Функцию со склонениями числительных вы уже написали, она добавлена в код. Осталось «прикрутить» её к Анфисе.
# Из функции process_anfisa(), из блока if query == 'сколько у меня друзей?' вызовите функцию format_friends_count()
# и вставьте возвращаемую этой функцией фразу в f-строку так, чтобы на вопрос 'сколько у меня друзей'
# функция возвращала грамотный ответ, например, У тебя 9 друзей или У тебя 3 друга.


DATABASE = {
    'Серёга': 'Омск',
    'Соня': 'Москва',
    'Миша': 'Москва',
    'Дима': 'Челябинск',
    'Алина': 'Красноярск',
    'Егор': 'Пермь',
    'Коля': 'Красноярск'
}


# Новая функция, она возвращает правильное словосочетание, склоняя слово "друзья"
# в зависимости от того, какое число передано в аргументе friends_count
def format_friends_count(friends_count):
    if friends_count == 1:
        return '1 друг'
    elif 2 <= friends_count <= 4:
        return f'{friends_count} друга'
    else:
        return f'{friends_count} друзей'


def process_anfisa(query):
    if query == 'сколько у меня друзей?':
        count = len(DATABASE)
        # Вызовите функцию format_friends_count() и передайте в неё count.
        # Отредактируйте строку ниже: в ней должно использоваться выражение,
        # которое вернёт функция format_friends_count()
        return f'У тебя {format_friends_count(count)}.'
    elif query == 'кто все мои друзья?':
        friends_string = ', '.join(DATABASE)
        return f'Твои друзья: {friends_string}'
    elif query == 'где все мои друзья?':
        unique_cities = set(DATABASE.values())
        cities_string = ', '.join(unique_cities)
        return f'Твои друзья в городах: {cities_string}'
    else:
        return '<неизвестный запрос>'


print('Привет, я Анфиса!')
print(process_anfisa('сколько у меня друзей?'))
print(process_anfisa('кто все мои друзья?'))
print(process_anfisa('где все мои друзья?'))
print(process_anfisa('кто виноват?'))


# Задача 2.
# Сделаем так, чтобы можно было задавать вопросы не только Анфисе, но и самим друзьям, обращаясь к ним по имени.
# А друзья ответят, в каком они городе. Добавим в запросы имена. Вопрос к Анфисе будет звучать так: Анфиса,
# где все мои друзья? Ответ на этот вопрос уже подготовлен, надо лишь немного изменить код.
# А вопрос к кому-то из друзей будет таким: Коля, ты где?. Анфиса должна ответить: Коля в городе Красноярск.
# Структура кода:

# в первую очередь теперь будет вызываться функция process_query(query) (вы сейчас её напишете), она получает
# запрос и разделяет его на имя и вопрос (например, запрос Анфиса, где все мои друзья? должен быть разделён на
# Анфиса и где все мои друзья?);
# если в запросе передано имя Анфиса — будет вызываться функция process_anfisa()
# с аргументом — вопросом (например — где все мои друзья?);
# Объявите в коде функцию process_query(query), в ней с помощью метода split() разделите строку query две части:
# на имя и вопрос.
# После этого напишите проверку, ветвление if:
# если имя — «Анфиса», вызовите функцию process_anfisa(), при вызове передайте в неё аргументом вопрос,
# получившийся при разделении строки query. Верните результат выполнения этой функции.
# если же имя — не «Анфиса», то функция пока не будет ничего делать, этот вариант обработаем в следующей задаче.
# Отредактируйте список вызовов функции, размещённый в конце программы:
# должна вызываться функция process_query(), вызовы должны выглядеть так:
# print(process_query('Текст_запроса'))
# все запросы должны начинаться с имени Анфиса:

# Анфиса, сколько у меня друзей?
# Анфиса, кто все мои друзья?
# Анфиса, где все мои друзья?
# Анфиса, кто виноват?

# добавьте ещё один вызов, для проверки: print(process_query('Соня, ты где?')). На этот запрос Анфиса вернет None,
# но не сломается.

DATABASE = {
    'Серёга': 'Омск',
    'Соня': 'Москва',
    'Миша': 'Москва',
    'Дима': 'Челябинск',
    'Алина': 'Красноярск',
    'Егор': 'Пермь',
    'Коля': 'Красноярск'
}


# Новая функция, она возвращает правильное словосочетание, склоняя слово "друзья"
# в зависимости от того, какое число передано в аргументе friends_count
def format_friends_count(friends_count):
    if friends_count == 1:
        return '1 друг'
    elif 2 <= friends_count <= 4:
        return f'{friends_count} друга'
    else:
        return f'{friends_count} друзей'


def process_anfisa(query):
    if query == 'сколько у меня друзей?':
        count = len(DATABASE)
        # Вызовите функцию format_friends_count() и передайте в неё count.
        # Отредактируйте строку ниже: в ней должно использоваться выражение,
        # которое вернёт функция format_friends_count()
        return f'У тебя {format_friends_count(count)}.'
    elif query == 'кто все мои друзья?':
        friends_string = ', '.join(DATABASE)
        return f'Твои друзья: {friends_string}'
    elif query == 'где все мои друзья?':
        unique_cities = set(DATABASE.values())
        cities_string = ', '.join(unique_cities)
        return f'Твои друзья в городах: {cities_string}'
    else:
        return '<неизвестный запрос>'


def process_query(query):
    tokens = query.split(', ')
    name = tokens[0]
    if name == 'Анфиса':
        return process_anfisa(tokens[1])


print('Привет, я Анфиса!')
print(process_query('Анфиса, сколько у меня друзей?'))
print(process_query('Анфиса, кто все мои друзья?'))
print(process_query('Анфиса, где все мои друзья?'))
print(process_query('Анфиса, кто виноват?'))
print(process_query('Соня, ты где?'))


# Задача 3.
# Объявите функцию process_friend(name, query), принимающую имя друга name и запрос query. В этой функции будут
# обрабатываться запросы, в которых имя — не «Анфиса».
# В функции process_friend() напишите ветвление:
# если друг с именем name есть в словаре DATABASE:
# если переменная query содержит строку 'ты где?' — функция должна вернуть сообщение '{имя_друга} в городе
# {название_города}'; название города нужно получить из словаря DATABASE.
# если переменная query содержит какую-то другую строку — функция должна вернуть сообщение <неизвестный запрос>.
# если друга с именем name нет в словаре DATABASE — функция должна вернуть сообщение:
# У тебя нет друга по имени {имя_друга}.
# Теперь нужно дописать функцию process_query().
# Добавьте в ветвление if name == 'Анфиса' блок else: если запрос начинается не с имени «Анфиса» — верните результат
# вызова функции process_friend(), передав в неё два аргумента: имя друга и текст вопроса.
# Добавьте новые вызовы функции process_query():
# print(process_query('Коля, что делать?'))
# print(process_query('Антон, ты где?'))

DATABASE = {
    'Серёга': 'Омск',
    'Соня': 'Москва',
    'Миша': 'Москва',
    'Дима': 'Челябинск',
    'Алина': 'Красноярск',
    'Егор': 'Пермь',
    'Коля': 'Красноярск'
}


# Новая функция, она возвращает правильное словосочетание, склоняя слово "друзья"
# в зависимости от того, какое число передано в аргументе friends_count
def format_friends_count(friends_count):
    if friends_count == 1:
        return '1 друг'
    elif 2 <= friends_count <= 4:
        return f'{friends_count} друга'
    else:
        return f'{friends_count} друзей'


def process_anfisa(query):
    if query == 'сколько у меня друзей?':
        count = len(DATABASE)
        # Вызовите функцию format_friends_count() и передайте в неё count.
        # Отредактируйте строку ниже: в ней должно использоваться выражение,
        # которое вернёт функция format_friends_count()
        return f'У тебя {format_friends_count(count)}.'
    elif query == 'кто все мои друзья?':
        friends_string = ', '.join(DATABASE)
        return f'Твои друзья: {friends_string}'
    elif query == 'где все мои друзья?':
        unique_cities = set(DATABASE.values())
        cities_string = ', '.join(unique_cities)
        return f'Твои друзья в городах: {cities_string}'
    else:
        return '<неизвестный запрос>'


def process_query(query):
    tokens = query.split(', ')
    name = tokens[0]
    if name == 'Анфиса':
        return process_anfisa(tokens[1])
    else:
        return process_friend(name, tokens[1])


def process_friend(name, query):
    if name in DATABASE:
        if query == 'ты где?':
            city = DATABASE[name]
            return f'{name} в городе {city}'
        else:
            return '<неизвестный запрос>'
    else:
        return f'У тебя нет друга по имени {name}'


print('Привет, я Анфиса!')
print(process_query('Анфиса, сколько у меня друзей?'))
print(process_query('Анфиса, кто все мои друзья?'))
print(process_query('Анфиса, где все мои друзья?'))
print(process_query('Анфиса, кто виноват?'))
print(process_query('Соня, ты где?'))
print(process_query('Коля, что делать?'))
print(process_query('Антон, ты где?'))
