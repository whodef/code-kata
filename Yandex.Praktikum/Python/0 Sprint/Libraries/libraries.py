#  Что такое библиотеки?

# Задача
# Научите Анфису отвечать на вопрос «Анфиса, как дела?» случайным образом.
# Для этого напишите функцию how_are_you() без параметров (да-да, функции могут не иметь параметров, это нормально).
# Пусть она возвращает случайный ответ из списка answers. Можете и сами дописать варианты :)

# здесь подключите библиотеку random и дайте ей краткое имя
import random as r


answers = ['Норм.', 'Лучше всех :)', 'Ну так', 'Отличненько!', 'Ничего, жить буду']


def how_are_you():
    # напишите ваш код здесь
    return r.choice(answers)


print(how_are_you())

# Работа со временем

# Задача 1.
# Научите Анфису сообщать пользователю, сколько времени шёл его любимый сериал.
# Дата выхода первой серии - 17 апреля 2011 года.
# Дата выхода последней серии - 15 апреля 2019 года.

import datetime as dt

start_time = dt.datetime(2011, 4, 17)  # дата выхода первой серии
final_time = dt.datetime(2019, 4, 15)  # впишите дату выхода последней серии

duration = final_time - start_time  # вычислите, сколько времени шёл сериал

print(duration)


# Задача 2.
# Напишите код, отвечающий на запрос пользователя Сколько времени у меня уже ушло на вводный курс по бэкенд-разработке?
# Вспомните, в какой день и во сколько вы начали проходить курс. Запишите этот момент времени в переменную start_moment.
# В переменную current_moment запишите текущий момент времени. Затем вычислите разницу двух этих моментов, запишите её
# в переменную total_time, и напечатайте её на экране.

# подключите библиотеку datetime под именем dt
import datetime as dt


start_moment = dt.datetime(2022, 2, 3, 20, 0)  # напишите код здесь
current_moment = dt.datetime(2022, 2, 6, 21, 26)  # напишите код здесь

total_time = current_moment - start_moment  # и здесь

print(total_time)


############

# Стандарт UTC

# Задача 1.
# Напишите функцию, которая по названию города скажет, сколько там сейчас времени.
# Мы заготовили словарь UTC_OFFSET, где для каждого города записана разница местного времени и UTC в часах.

import datetime as dt


UTC_OFFSET = {
    'Санкт-Петербург': 3,
    'Москва': 3,
    'Самара': 4,
    'Новосибирск': 7,
    'Екатеринбург': 5,
    'Нижний Новгород': 3,
    'Казань': 3,
    'Челябинск': 5,
    'Омск': 6,
    'Ростов-на-Дону': 3,
    'Уфа': 5,
    'Красноярск': 7,
    'Пермь': 5,
    'Воронеж': 3,
    'Волгоград': 4,
    'Краснодар': 3,
    'Калининград': 2
}


def what_time(city):
    # напишите код тела функции
    # пусть она вернет время в городе city
    now = dt.datetime.utcnow()
    return now + dt.timedelta(hours = UTC_OFFSET[city])


print(what_time('Екатеринбург'))


# Задача 2.
# Напишите функцию, которая по имени друга скажет, сколько у него сейчас времени.
# В словаре DATABASE хранятся данные о том, кто из друзей где живёт.

import datetime as dt


DATABASE = {
    'Серёга': 'Омск',
    'Соня': 'Москва',
    'Дима': 'Челябинск',
    'Алина': 'Красноярск',
    'Егор': 'Пермь'
}

UTC_OFFSET = {
    'Санкт-Петербург': 3,
    'Москва': 3,
    'Самара': 4,
    'Новосибирск': 7,
    'Екатеринбург': 5,
    'Нижний Новгород': 3,
    'Казань': 3,
    'Челябинск': 5,
    'Омск': 6,
    'Ростов-на-Дону': 3,
    'Уфа': 5,
    'Красноярск': 7,
    'Пермь': 5,
    'Воронеж': 3,
    'Волгоград': 4,
    'Краснодар': 3,
    'Калининград': 2
}


def what_time(friend):
    # напишите код тела функции
    # пусть она вернет время у друга из аргумента friend
    now = dt.datetime.utcnow()
    city = DATABASE[friend]
    return now + dt.timedelta(hours = UTC_OFFSET[city])


print(what_time('Соня'))


############

# Форматирование времени

# Задача 1.
# Сделайте так, чтобы функция what_time() возвращала время в формате часы:минуты.

import datetime as dt


DATABASE = {
    'Серёга': 'Омск',
    'Соня': 'Москва',
    'Дима': 'Челябинск',
    'Алина': 'Красноярск',
    'Егор': 'Пермь'
}

UTC_OFFSET = {
    'Санкт-Петербург': 3,
    'Москва': 3,
    'Самара': 4,
    'Новосибирск': 7,
    'Екатеринбург': 5,
    'Нижний Новгород': 3,
    'Казань': 3,
    'Челябинск': 5,
    'Омск': 6,
    'Ростов-на-Дону': 3,
    'Уфа': 5,
    'Красноярск': 7,
    'Пермь': 5,
    'Воронеж': 3,
    'Волгоград': 4,
    'Краснодар': 3,
    'Калининград': 2
}


def what_time(friend):
    # напишите код тела функции
    # пусть она вернет время у друга из аргумента friend
    now = dt.datetime.utcnow()
    city = DATABASE[friend]
    re = now + dt.timedelta(hours = UTC_OFFSET[city])
    return re.strftime('%H:%M')


print(what_time('Соня'))


# Задача 1.
# Примените все полученные в этой теме знания, чтобы научить Анфису отвечать на вопросы про друзей,
# сколько у них сейчас времени:
# Артём, который час?
# Антон, который час?
# Примеры таких запросов уже добавлены в список queries в функции runner().
# Измените функцию process_friend(), чтобы она обрабатывала ещё один запрос, а именно query == 'который час?'
# Если город друга есть в базе UTC_OFFSET, вызовите функцию what_time() и, подставив полученный результат,
# верните ответ в формате Там сейчас 19:28.
# Если город отсутствует в базе UTC_OFFSET,
# то верните сообщение об ошибке <не могу определить время в городе {название}>

import datetime as dt


DATABASE = {
    'Сергей': 'Омск',
    'Соня': 'Москва',
    'Алексей': 'Калининград',
    'Миша': 'Москва',
    'Дима': 'Челябинск',
    'Алина': 'Красноярск',
    'Егор': 'Пермь',
    'Коля': 'Красноярск',
    'Артём': 'Владивосток',
    'Петя': 'Михайловка'
}

UTC_OFFSET = {
    'Москва': 3,
    'Санкт-Петербург': 3,
    'Новосибирск': 7,
    'Екатеринбург': 5,
    'Нижний Новгород': 3,
    'Казань': 3,
    'Челябинск': 5,
    'Омск': 6,
    'Самара': 4,
    'Ростов-на-Дону': 3,
    'Уфа': 5,
    'Красноярск': 7,
    'Воронеж': 3,
    'Пермь': 5,
    'Волгоград': 3,
    'Краснодар': 3,
    'Калининград': 2,
    'Владивосток': 10
}


def format_count_friends(count_friends):
    if count_friends == 1:
        return '1 друг'
    elif 2 <= count_friends <= 4:
        return f'{count_friends} друга'
    else:
        return f'{count_friends} друзей'


def what_time(city):
    offset = UTC_OFFSET[city]
    city_time = dt.datetime.utcnow() + dt.timedelta(hours=offset)
    f_time = city_time.strftime("%H:%M")
    return f_time


def process_anfisa(query):
    if query == 'сколько у меня друзей?':
        count = len(DATABASE)
        return f'У тебя {format_count_friends(count)}.'
    elif query == 'кто все мои друзья?':
        friends_string = ', '.join(DATABASE)
        return f'Твои друзья: {friends_string}'
    elif query == 'где все мои друзья?':
        unique_cities = set(DATABASE.values())
        cities_string = ', '.join(unique_cities)
        return f'Твои друзья в городах: {cities_string}'
    else:
        return '<неизвестный запрос>'


def process_friend(name, query):
    if name in DATABASE:
        city = DATABASE[name]
        if query == 'ты где?':
            return f'{name} в городе {city}'
        elif query == 'который час?':
            if city in UTC_OFFSET:
                return f'Там сейчас {what_time(city)}'
            else:
                return f'<не могу определить время в городе {DATABASE [name]}>'
        else:
            return '<неизвестный запрос>'
    else:
        return f'У тебя нет друга по имени {name}'


def process_query(query):
    elements = query.split(', ')
    if elements[0] == 'Анфиса':
        return process_anfisa(elements[1])
    else:
        return process_friend(elements[0], elements[1])


def runner():
    queries = [
        'Анфиса, сколько у меня друзей?',
        'Анфиса, кто все мои друзья?',
        'Анфиса, где все мои друзья?',
        'Анфиса, кто виноват?',
        'Коля, ты где?',
        'Соня, что делать?',
        'Антон, ты где?',
        'Алексей, который час?',
        'Артём, который час?',
        'Антон, который час?',
        'Петя, который час?'
    ]
    for query in queries:
        print(query, '-', process_query(query))


runner()
